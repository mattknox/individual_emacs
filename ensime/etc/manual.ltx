\documentclass{article}

\usepackage[utf8]{inputenc}

\usepackage{amsmath}

\newenvironment{mylisting}
{\begin{list}{}{\setlength{\leftmargin}{1em}}\item\scriptsize\bfseries}
  {\end{list}}


\title{ENSIME: User Manual}

\begin{document}

\maketitle

\newpage

\tableofcontents

\newpage


\pagestyle{empty}


\section{Introduction}

\subsection{What is ENSIME?}
ENSIME is an intelligent Scala environment for Emacs. It provides many features that are commonly found only in IDEs, such as live error-checking, symbol inspection, package/type browsing, and basic refactorings. ENSIME's architecture is client/server: a thin Emacs client communicates with an analysis server written in Scala. The client component is based heavily on the SLIME environment for Common Lisp - using the same Swank RPC protocol. The server component services these calls using an instance of the official Scala compiler, so the results should always be consistent with the commandline compiler.

\section{Installation}

\subsection{System Requirements}

\begin{itemize}
\item Emacs 22 or later (23 is recommended)
\item Unix(y) or Windows OS
\item JVM Version 6
\item Scala 2.8 compatible source and libraries.
\end{itemize}

\subsubsection{Note on Binary Compatibility}

The compiler version that ENSIME uses to analyze sources is the same as that which is used to compile ENSIME itself. This version (as of the writing of this document) is 2.8.0. It may not be possible for the ENSIME compiler to load older Scala jars. We recommend that you use a version of ENSIME that targets the same Scala version as your project.

\subsection{Standard Installation}

\noindent
\textbf{scala-mode}:\\
ENSIME is designed to compliment scala-mode. scala-mode can be found in the Scala distribution under misc/scala-tool-support/emacs/\\

\noindent
\textbf{ensime-mode}:\\
Download the latest ENSIME distribution from github.com at \begin{verbatim}http://github.com/aemoncannon/ensime/downloads\end{verbatim} Unpack the ENSIME distribution into a directory of your choosing, and add the following lines to your .emacs file:

\begin{mylisting}
\begin{verbatim}
;; Load the ensime lisp code...
(add-to-list 'load-path "ENSIME_ROOT/elisp/")
(require 'ensime)

;; This step causes the ensime-mode to be started whenever
;; scala-mode is started for a buffer. You may have to customize this step
;; if you're not using the standard scala mode.
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)

;; MINI HOWTO: 
;; Open .scala file. M-x ensime (once per project)
\end{verbatim}
\end{mylisting}


Now you need to define a .ensime file for your project. See section \ref{sec:config}.


\subsection{Installation from Git Clone}

Note: This section is for people who want to hack on ENSIME itself.\\

\noindent
After cloning, and before you can run ENSIME, you must create the distribution directory structure. The sbt task 'stage' will create the directory 'dist' underneath the root clone directory. Then, follow the install instructions in section 2.2 above, substituting CLONE\_DIR/dist as the root of your ENSIME distribution.\\

\noindent
A common work-flow when hacking ENSIME:
\begin{itemize}
\item Edit source files
\item 'sbt dist'
\item Stop ENSIME server by killing \emph{*inferior-ensime-server*} buffer
\item Restart ENSIME with M-x ensime
\end{itemize}



\section{Defining a Project}


\subsection{Generating a Config File}
\label{sec:config}

ENSIME includes a wizard for automatically generating configuration files. In Emacs, execute \emph{M-x ensime-config-gen}. Then simply follow the directions in the mini-buffer to create a .ensime file for your project.  ENSIME will try to guess the type(sbt, mvn, etc) of your project, based on the files and directory structure. If the config generator does a poor job for your project, please let us know so we can improve it. And of course you can still create the .ensime file for your project manually. See the section on the .ensime format below.

\subsection{Notes on Specific Project Types}

\subsubsection{SBT}

\noindent
\textbf{Inferior SBT}:\\
The keystrokes \emph{C-c C-v s} will launch (or switch to an existing) inferior sbt session.\\

\noindent
\textbf{Compile-on-Save}:\\
If the configuration directive :sbt-compile-on-save is set to 't', ENSIME will invoke the 'compile' task in the inferior sbt process whenever you save a Scala buffer. Warning: This can eat up a lot of CPU.\\

\noindent
\textbf{Subprojects}:\\
Each sbt subproject must have it's own .ensime file. The server is smart enough to notice that the project is a subproject, and will find dependencies that are shared between all subprojects.

\subsubsection{Maven}

\noindent
\textbf{Known limitations}:\\
Currently ENSIME expects to find pom.xml in the root of the project.\\

\noindent
\textbf{Dependencies}:\\
Dependencies are discovered using the maven ant task. In debugging dependency resolution issues, it may be helpful to look at the contents of the \emph{*inferior-ensime-server*} buffer.

\subsubsection{Other + Ivy}

\noindent
\textbf{Dependencies}:\\
Dependencies are discovered using the ivy ant task. In debugging dependency resolution issues, it may be helpful to look at the contents of the \emph{*inferior-ensime-server*} buffer. If you've defined ivy configurations that you'd like to map to the compile and runtime modes in ENSIME, see the :ivy-*-conf directives in section \ref{sec:configformat}. If your ivy.xml file is in a non-standard location, see the :ivy-file directive .

\subsubsection{Other}

Your project doesn't fit into one of the given categories? No problem. See section \ref{sec:configformat} for how to specify dependency, source, and class-output locations.


\subsection{Config File Format}
\label{sec:configformat}

Each project \emph{must} have a .ensime file. The .ensime file contains the configuration for your project, and must be located in your project's root directory.The contents of the file must be a valid Emacs-Lisp S-Expression. Here's a quick primer on ELisp values.

\vspace{1 cm}

\begin{tabular}{|l|l|}
  \hline
  {\bf "..."} & A String  \\ \hline
  {\bf t} & True \\ \hline
  {\bf nil} & False, null, or opposite of t.  \\ \hline
  {\bf (...)} & A literal list. \\ \hline
  {\bf :abcd123} & A keyword \\ \hline
  {\bf (:key1 val1 :key2 val2)} & An indexed property-list. \\ \hline
\end{tabular}

\vspace{1 cm}

What follows is a description of all available configuration options. Required options are marked as 'Required'. Any filename or directory paths may be relative to the project root.

\vspace{5 mm}

\noindent
{\bf :project-name "...."}\\
The friendly name of your project. Will be displayed in the Emacs mode-line when connected to an ENSIME server. If no name is given, ENSIME will try to use an existing project name (only sbt, currently).
\vspace{5 mm}

\noindent
{\bf :server-root "...."}\\
The absolute path to the root of your ENSIME distribution. By default this is inferred from the location of the ensime.el E-Lisp library.
\vspace{5 mm}


\noindent
{\bf :server-cmd  "...."}\\
The command with which to invoke the ENSIME server. By default, this will be set to "bin/server.sh" on Unix systems and "bin/server.bat" on Windows.
\vspace{5 mm}


\noindent
{\bf :server-host "...."}\\
The host to connect to. Connecting to remote ENSIME servers is not currently supported (though it may work...)
\vspace{5 mm}


\noindent
{\bf :use-sbt [t or nil]}\\
Assume a standard sbt directory structure. Look in default sbt locations for dependencies, sources, target, etc.
\vspace{5 mm}


\noindent
{\bf :sbt-compile-on-save [t or nil]}\\
Should ENSIME issue a 'compile' command to sbt whenever you save a file? This is disabled by default as it consumes a lot of CPU.
\vspace{5 mm}

\noindent
{\bf :sbt-subproject-dependencies ([directory name]*)}\\
Declare sbt sub-project dependencies. List the directory names of the dependencies and ENSIME will include their sources and dependencies when analyzing the current project.
\vspace{5 mm}



\noindent
{\bf :use-maven t}\\
Use an existing pom.xml to determine the dependencies for the project. A Maven-style directory structure is assumed.
\vspace{5 mm}


\noindent
{\bf :use-ivy t}\\
Use an existing ivy.xml to determine the dependencies for the project. A Maven-style directory structure is assumed.
\vspace{5 mm}

\noindent
{\bf :ivy-file filename}\\
Override the default ivy.xml location.
\vspace{5 mm}

\noindent
{\bf :ivy-compile-conf "...."}\\
\noindent
{\bf :ivy-runtime-conf "...."}\\
Specify the names of dependency profiles to be used for compilation and runtime scenarios. Only necessary if you have custom configurations!
\vspace{5 mm}


\noindent
{\bf :project-package "...."}\\
The main scala package for your project. Used by ENSIME to populate the project outline view. 
\vspace{5 mm}


\noindent
{\bf :sources ([directory or filename]*)}\\
Manually include source files by directory(recursively) or by filename. If directory is given, only .scala and .java files will be considered.
\vspace{5 mm}


\noindent
{\bf :compile-jars ([directory or filename]*)}\\
Manually include jars by directory(recursively) or by filename, to be included on the compile and runtime classpaths.
\vspace{5 mm}

\noindent
{\bf :exclude-compile-jars ([directory or filename]*)}\\
Manually exclude jars by directory(recursively) or by filename. These jars will be excluded from any classpath.
\vspace{5 mm}


\noindent
{\bf :runtime-jars ([directory or filename]*)}\\
Manually include jars by directory(recursively) or by filename, to be included only on the runtime classpath.
\vspace{5 mm}

\noindent
{\bf :exclude-runtime-jars ([directory or filename]*)}\\
Manually exclude jars by directory(recursively) or by filename. These jars will be excluded from the runtime classpath.
\vspace{5 mm}

\noindent
{\bf :class-dirs ([directory]*)}\\
Manually include directories of .class files, to be included on the compile and runtime classpaths.
\vspace{5 mm}

\noindent
{\bf :target directory}\\
Manually specify the target of the project build process. This directory will be included on the runtime classpath when debugging or using the repl, and will be pupulated by the incremental compiler. Will be created if it doesn't exist.
\vspace{5 mm}

\noindent
{\bf :formatting-prefs ([:key value]*)}\\
Customize the behavior of the source formatter. All Scalariform preferences are supported:\\
\begin{tabular}{|l|l|}
  \hline
  {\bf :alignParameters} & t or nil  \\ \hline
  {\bf :compactStringConcatenation} & t or nil  \\ \hline
  {\bf :doubleIndentClassDeclaration} & t or nil  \\ \hline
  {\bf :indentSpaces} & 1-10  \\ \hline
  {\bf :preserveSpaceBeforeArguments} & t or nil  \\ \hline
  {\bf :rewriteArrowSymbols} & t or nil  \\ \hline
  {\bf :spaceBeforeColon} & t or nil  \\ \hline
\end{tabular}

\vspace{5 mm}


\section{Usage}

\subsection{Startup}
To start ensime type \emph{M-x ensime}. You only need to do this once per project session. Follow the minibuffer instructions to specify the location of your .ensime project file. Bear in mind that the server may take several seconds to finish loading and analyzing your project's sources. To watch the progress of the ENSIME startup, switch to the \emph{*inferior-ensime-server*} buffer.

\subsection{Symbol and Member Completion}
ENSIME completion is initiated by pressing the \emph{TAB} key. To complete a symbol, type the first couple characters, then press \emph{TAB}. Currently this works for local variables, method parameters, unqualified method names, and type names. To complete a type member, type '.' or \emph{SPACE} followed by \emph{TAB}.\\

\noindent
\textbf{Completion menu key commands}:\\
Candidates can be scrolled with \emph{M-n} and \emph{M-p} or \emph{UP} and \emph{DOWN}. Candidates can be searched by typing \emph{C-s}. Press \emph{TAB} again to complete a common prefix. To cancel completion, type \emph{C-g}. Finally, if you've selected the completion you want, press \emph{ENTER}. If the selected completion was a method name, the minibuffer will display help for the method parameters.

\subsection{Type/Package Inspector}


\noindent
\textbf{Invocation}:\\
Control+Right-Clicking on a symbol in a Scala buffer, or typing \emph{C-c C-v i} while the point is over a symbol will launch the type inspector. Typing \emph{C-c C-v o} will open the inspector on the current project's main package. \emph{C-c C-v p} will inspect the package of the current source file. Use the command \emph{M-x ensime-inspect-by-path} to inspect an arbitrary type or package.\\

\noindent
\textbf{Package Inspector}:\\
Displays a hierarchical view of a package, including all top-level types. Select a type to open the Type Inspector.\\

\noindent
\textbf{Type Inspector}:\\
Lists the interfaces that contribute members to the inspected type. List each interface's methods, with full type signatures. If the type has a companion object/class, a link to the companion will appear under the heading.\\

\noindent
\textbf{Navigation}:\\
Most things in the inspector are hyper-linked. You can click these links with the mouse or position your cursor over them and press ENTER. A history is kept of all the pages you view in the inspector. Go back in this history by typing '\emph{,}' and forward by typing '\emph{.}'.


\subsection{The Scala REPL}

First, ensure that you've set the :target directive in your config file. The REPL will load your project classes from the :target directory. Then, type \emph{C-c C-v z} to launch the embedded Scala REPL. The REPL should be launched with all your project classes loaded and available. Please note that the Scala 2.8 REPL tab-completion does not currently work under ENSIME.

\subsection{Incremental Building}

Incremental building allows for fast turn-around in the running/testing of your application. The building/rebuilding support in ENSIME is intended for those who are not already using the sbt build system, as sbt users will probably wish to continue using the sbt shell's support for incremental building (it may still be worth a try though, as the build-manager included in ENSIME uses a finer grained check for modifications).

First, ensure that you've set the :target directive in your config file. The :target directory is where the classes will be written by the incremental builder. Then, type \emph{C-c C-b b} to start building your project. When the build is finished, a window will appear listing the result of the build. After subsequent source changes, you may type \emph{C-c C-b r} to rebuild only those parts of the project that depend on things you've changed. 

\subsection{Debugging}

Debugging support in ENSIME is provided by running an instance of jdb under Emacs, sending it commands, and parsing its output. As such, in addition to the graphical tools provided by ENSIME, you also have full access to the jdb command line.\\

\noindent
\textbf{Launching the Debugger}:\\
First, ensure that you've set the :target directive in your config file. The debugger needs these classes to run your application. Then, type \emph{C-c C-d d} to launch the embedded Scala Debugger. \\

\noindent
\textbf{Break Points}:\\
With your cursor on a line of Scala source, type \emph{C-c C-d b} to set a breakpoint. Type \emph{C-c C-d u} to remove the breakpoint.\\

\noindent
\textbf{Run Control}:\\
Once you've set your breakpoints, type \emph{C-c C-d r} to run the program. Type \emph{C-c C-d c} to continue after hitting a breakpoint, or \emph{C-c C-d s} to step into the current line, or \emph{C-c C-d n} to step to the next line.\\

\noindent
\textbf{Value Inspection}:\\
When stopped at a breakpoint, switch to the debug buffer \emph{*ensime-db*}. Type 'locals' ENTER to see a list of all the local variables in the current runtime context. Use 'dump X'' to dump the fields of an object X. Or 'print X' to print the value of an arbitrary expression X. To get help on more jdb commands, type 'help'.

\subsection{Refactoring}

\noindent
\textbf{Rename}:\\
Place your cursor over the symbol you'd like to rename. Type \emph{M-x ensime-refactor-rename} and follow the minibuffer instructions.\\

\noindent
\textbf{Organize Imports}:\\
Type \emph{M-x ensime-refactor-organize-imports} in a Scala source buffer. Follow the minibuffer instructions.\\

\noindent
\textbf{Extract Method}:\\
Select a region by setting the mark using \emph{C-SPACE} and then placing the point at the end of the region. All selected code will be extracted into a helper method. Type \emph{M-x ensime-refactor-extract-method} and follow the minibuffer instructions.\\

\noindent
\textbf{Inline Local}:\\
Place your cursor over the local val who's value you'd like to inline. Type \emph{M-x ensime-refactor-inline-local} and follow the minibuffer instructions.\\

\subsection{Source Formatting}

ENSIME uses the Scalariform library to format Scala sources. Type \emph{C-c C-v f} to format the current buffer. See section \ref{sec:configformat} for instructions on how to customize the formatting preferences.


\subsection{Scaladoc and Javadoc Browsing (customizing)}

If ENSIME cannot find the source for a type or member, it will instead try to browse to the www documentation. Support is included for the java and scala standard libraries, as well as the android class library. To add your own doc library, you need to add a handler to the \emph{ensime-doc-lookup-map}. This handler list is made up of (regex . handler) pairs, where regex is a regular expression string that will be matched against the fully qualified type name, and handler is a function that will be applied to the requested type and member and should return a url. Here's an example of how you might add new java docs for classes in com.example:

\begin{mylisting}
\begin{verbatim}

(defun make-example-doc-url (type &optional member)
  (ensime-make-java-doc-url-helper 
    "http://developer.example.com/apidocs/" type member))

(add-to-list 'ensime-doc-lookup-map '("^com\\.example\\." . make-example-doc-url))

\end{verbatim}
\end{mylisting}

\noindent
Note that \emph{ensime-make-java-doc-url-helper}, and its Scala equivalent \emph{ensime-make-scala-doc-url-helper}, are provided for doing the harder work of building the url paths.



\subsection{Quick Command Reference}

\vspace{5 mm}

\noindent
{\bf TAB}\\
Start completing a method/variable.
\vspace{5 mm}

\noindent
{\bf C-c C-v i  or  Control+Right-Click}\\
Inspect the type of the expression under the cursor.
\vspace{5 mm}

\noindent
{\bf M-.  or  Control+Left-Click}\\
Jump to definition of symbol under cursor.
\vspace{5 mm}

\noindent
{\bf M-,}\\
Pop back to previously visited position.
\vspace{5 mm}

\noindent
{\bf Control+Right-Click(on an imported package)}\\
Inspect the package under cursor.
\vspace{5 mm}

\noindent
{\bf Mouse Hover}\\
Echo the type of the expression under the cursor.
\vspace{5 mm}

\noindent
{\bf C-c C-v p}\\
Inspect the package of the current source file.
\vspace{5 mm}

\noindent
{\bf C-c C-v o}\\
Inspect the package specified in .ensime as :project-package.
\vspace{5 mm}

\noindent
{\bf .}\\
Forward one page in the inspector history.
\vspace{5 mm}

\noindent
{\bf ,}\\
Backward one page in the inspector history.
\vspace{5 mm}

\noindent
{\bf C-n or TAB}\\
Forward one link in the inspector.
\vspace{5 mm}

\noindent
{\bf C-p}\\
Backward one link in the inspector.
\vspace{5 mm}

\noindent
{\bf C-c C-v s}\\
Switch to the sbt command-line (works for sbt projects only)
\vspace{5 mm}

\noindent
{\bf C-c C-v z}\\
Switch to the scala interpreter, with project classes in the classpath.
\vspace{5 mm}

\noindent
{\bf C-c C-v c}\\
Type-check the current file.
\vspace{5 mm}

\noindent
{\bf C-c C-v a}\\
Type-check all files in the project.
\vspace{5 mm}

\noindent
{\bf C-c C-v f}\\
Format the current Scala source file.
\vspace{5 mm}

\noindent
{\bf C-c C-v u}\\
Undo a refactoring or formatting change.
\vspace{5 mm}

\noindent
{\bf M-n}\\
Go to the next compilation note in the current buffer.
\vspace{5 mm}

\noindent
{\bf M-p}\\
Go to the previous compilation note in the current buffer.
\vspace{5 mm}

\noindent
{\bf C-c C-d \emph{x}}\\
Where \emph{x} is one of:
\begin{itemize}
\item {\bf d}  Start the debugger. 
\item {\bf b}  Set a breakpoint.
\item {\bf u}  Clear a breakpoint.
\item {\bf r}  Run the debugged class.
\item {\bf s}  Step.
\item {\bf n}  Step over.
\item {\bf c}  Continue from a breakpoint.
\item {\bf q}  Kill the debug session.
\item {\bf l}  List the local variables at current line.
\end{itemize}
\vspace{5 mm}

\noindent
{\bf C-c C-r \emph{x}}\\
Where \emph{x} is one of:
\begin{itemize}
\item {\bf r}  Rename the symbol at point. 
\item {\bf o}  Organize imports. 
\item {\bf l}  Extract local. 
\item {\bf m}  Extract method. 
\item {\bf i}  Inline local. 
\end{itemize}
\vspace{5 mm}

\noindent
{\bf C-c C-b \emph{x}}\\
Where \emph{x} is one of:
\begin{itemize}
\item {\bf b}  Build the entire project. 
\item {\bf r}  Rebuild the project, incrementally. 
\end{itemize}
\vspace{5 mm}

\noindent
{\bf M-x ensime-reload}\\
Reload the .ensime file and recompile the project. Useful if you hit a server bug.
\vspace{5 mm}

\noindent
{\bf M-x ensime-config-get}\\
Start the automatic configuration file generator.
\vspace{5 mm}


\section{Troubleshooting}

You may want to examine the contents of the \emph{*inferior-ensime-server*} buffer. This buffer collects the stdout and stderr of the server process, which is useful for debugging. If the compiler is in a broken state, you can restart it with M-x ensime-reload. Otherwise, if things are irreparably b0rked, you can always kill the \emph{*inferior-ensime-server*} buffer (which kills the server process) and restart ensime with M-x ensime. 

If you've hit a recurring bug, please post an issue to github.com/aemoncannon/ensime. Please include your OS, Emacs version, ENSIME version, and the contents of \emph{*inferior-ensime-server*}.

\newpage

\appendix


\section{Using the ENSIME Server with Other Editors}

The ENSIME server is intentionally editor agnostic. It is our hope that it may be used to provide semantic information to Scala modes in other text editors. In order to interact with the ENSIME server, your editor's extension mechanism should ideally be able to open a persistent socket connection and respond to asynchronous events on that socket. Otherwise it may be difficult to interact with some of the long-running calls.

\subsection{Starting the Server}

Emacs starts the ENSIME server using the server.sh script in the \emph{bin} folder of the ENSIME distribution. Rather than tell the server explicitely what tcp port it should bind to,we instead pass the filename of a temporary file to the script. The first thing the server does on startup is choose a random, open port, and write the number to the given file. Emacs then reads this file and connects to the server. 


\subsection{The Swank Protocol}
The Emacs ENSIME client communicates with the server using the Swank protocol. This protocol was originally developed for the SLIME lisp environment for Emacs and is therefore very 'lispy'. A socket connection is maintained for the duration of the session. The client and server exchange messages encoded as S-Expressions, separated by hex-encoded message lengths. See the E-Lisp function \emph{ensime-net-send} in ensime.el for details on how messages are sent from Emacs, and the functions readMessage and writeMessage in org.ensime.protocol.SwankProtocol for the Scala side of the conversation. What follows is a commented excerpt from the initialization of an ENSIME session. These SExps were copied from the \emph{*ensime-events*} buffer in Emacs which logs all protocol events (useful for learning the protocol!). Server messages are indented. Comments prefixed with \#.

\begin{mylisting}
\begin{verbatim}

# The client requests information about the server
(:swank-rpc
 (swank:connection-info) 1)

# Server responds. Note the numbering scheme for RPC calls: call & response 
# have the same call id (1 in this case).
(:return
 (:ok
  (:pid nil :server-implementation
	(:name "ENSIMEserver")
	:machine nil :features nil :version "0.0.1")) 1)

# The client initializes the session by sending the configuration. 
# This is read from the .ensime file.
(:swank-rpc
 (swank:init-project
  (:project-package "org.ensime" :use-sbt t 
   :root-dir "/home/aemon/src/misc/ensime/")) 2)

# The acknowledges the message and sends some useful project info 
# back to the client.
(:return
 (:ok
  (:project-name "ensime" :source-roots
		 ("/home/aemon/src/misc/ensime/src/main/scala" 
		 "/home/aemon/src/misc/ensime/src/main/java" 
		 "/home/aemon/src/misc/ensime/src/test/scala"))) 2)


# Server asks client to display a user message. 
# Note: this is not part of any RPC call - it's just an event from the server.
(:background-message "Initializing Analyzer. Please wait...")

# Server alerts client that the analyzer is now ready for RPC requests.
(:compiler-ready t)

# Server tells client the result of the last full compilation 
# (nil means 0 notes (errors or warnings))
(:typecheck-result
 (:lang :scala :is-full t :notes nil))

\end{verbatim}
\end{mylisting}

Rather than try to document all the calls and events available in ENSIME, which will inevitably drift out of sync over time, we refer you to the method handleRPCRequest in org.ensime.protocol.SwankProtocol, and the function ensime-dispatch-event in ensime.el for further details on the Swank protocol.

\subsection{Other Protocols}

The ENSIME server is designed to support pluggable protocols. org.ensime.protocol.SwankProtocol is just one implementation of the org.ensime.protocol.Protocol interface. Adding a new protocol (JSON-based, or binary or Java marshalled objects...) should only require adding a new implementation of org.ensime.protocol.Protocol. Please contact the ENSIME maintainer if this is your plan, however, since we still need to add a command-line switch to control the protocol that ENSIME uses.

\end{document}




